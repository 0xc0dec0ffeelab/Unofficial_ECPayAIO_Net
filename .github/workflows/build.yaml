name: Build and Package NuGet

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to publish (git tag first or default e.g., 1.0.0)'
        default: '1.0.0'

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: ['8.0.x']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Determine Version
      id: determine-version
      run: |
        git fetch --tags
        LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
        if [ -z "$LAST_TAG" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="$LAST_TAG"
        fi
        echo "Version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_ENV

    - name: Generate Changelog (Dynamic Tags)
      id: changelog
      run: |
        git fetch --tags
    
        # Get the most recent tag
        LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
    
        # Get the second most recent tag
        PREVIOUS_TAG=$(git describe --tags $(git rev-list --tags --skip=1 --max-count=1))
    
        echo "Last Tag: $LAST_TAG"
        echo "Previous Tag: $PREVIOUS_TAG"

        if [ -z "$LAST_TAG" ]; then
          # If no tags exist, include all commits
          echo "No tags found. Using all commits."
          git log --pretty=format:"- %s (%an)" > changelog.md
        elif [ -z "$PREVIOUS_TAG" ]; then
          # If there is only one tag, include all commits before that tag
          echo "Only one tag ($LAST_TAG) found. Using commits before $LAST_TAG."
          git log $LAST_TAG --pretty=format:"- %s (%an)" > changelog.md
        else
          # If there are at least two tags, include commits between the two most recent tags
          echo "Generating Changelog from $PREVIOUS_TAG to $LAST_TAG."
          git log $PREVIOUS_TAG..$LAST_TAG --pretty=format:"- %s (%an)" > changelog.md
        fi
    
        # Add the generation date to the changelog
        echo "" >> changelog.md
        echo "Generated on $(date)" >> changelog.md
    
        # Display the changelog for debugging purposes
        cat changelog.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Changelog to GitHub Release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.version }}
        name: Release ${{ env.version }}
        body: |
          $(cat changelog.md)

    - name: Restore dependencies
      run: dotnet restore Unofficial_ECPayAIO_Net/ECPay.Payment.Integration/ECPay.Payment.Integration.csproj

    - name: Set Package Version
      run: |
        sed -i 's/<Version>.*<\/Version>/<Version>${{ env.version }}<\/Version>/' Unofficial_ECPayAIO_Net/ECPay.Payment.Integration/ECPay.Payment.Integration.csproj

    - name: Build and Package
      run: dotnet pack --configuration Release --output ./nuget Unofficial_ECPayAIO_Net/ECPay.Payment.Integration/ECPay.Payment.Integration.csproj

    - name: Publish to GitHub Packages
      env:
        NUGET_SERVER_URL: "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        for nupkg in ./nuget/*.nupkg; do
          dotnet nuget push "$nupkg" \
            --source $NUGET_SERVER_URL \
            --api-key $NUGET_API_KEY
        done

