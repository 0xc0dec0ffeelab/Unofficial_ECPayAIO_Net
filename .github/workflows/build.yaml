name: Build and Package NuGet

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to publish (git tag first or default e.g., 1.0.0)'
        default: '1.0.0'

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: ['8.0.x']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Determine Version and Fetch Tags
      id: version-determiner
      run: |
        # Fetch all tags from the remote repository
        git fetch --tags
        
        # Get the most recent tag
        LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
        
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags $(git rev-list --tags --skip=1 --max-count=1))

        echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
        echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

        # Set the version based on the tags or input
        if [ -n "$LAST_TAG" ]; then
          echo "VERSION=$LAST_TAG" >> $GITHUB_ENV
        else
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        fi

    - name: Generate Changelog (Dynamic Tags)
      id: changelog
      run: |
        echo "Using tags: LAST_TAG=${{ env.LAST_TAG }} PREVIOUS_TAG=${{ env.PREVIOUS_TAG }}"
        
        if [ -z "${{ env.LAST_TAG }}" ]; then
          echo "No tags found. Using all commits."
          git log --pretty=format:"- %s (%an)" > changelog.md
        elif [ -z "${{ env.PREVIOUS_TAG }}" ]; then
          echo "Only one tag (${{ env.LAST_TAG }}) found. Using commits before ${{ env.LAST_TAG }}."
          git log ${{ env.LAST_TAG }} --pretty=format:"- %s (%an)" > changelog.md
        else
          echo "Generating Changelog from ${{ env.PREVIOUS_TAG }} to ${{ env.LAST_TAG }}."
          git log ${{ env.PREVIOUS_TAG }}..${{ env.LAST_TAG }} --pretty=format:"- %s (%an)" > changelog.md
        fi

        # Add generation date
        echo "" >> changelog.md
        echo "Generated on $(date)" >> changelog.md

        # Display the changelog for debugging
        cat changelog.md

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Changelog to GitHub Release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        body: |
            $(<changelog.md)

    - name: Restore dependencies
      run: dotnet restore Unofficial_ECPayAIO_Net/ECPay.Payment.Integration/ECPay.Payment.Integration.csproj

    - name: Set Package Version
      run: |
        # Use the VERSION from the environment variable directly
        VERSION="${{ env.VERSION }}"
    
        # Update the .csproj file with the chosen version
        sed -i 's/<Version>.*<\/Version>/<Version>'"$VERSION"'<\/Version>/' Unofficial_ECPayAIO_Net/ECPay.Payment.Integration/ECPay.Payment.Integration.csproj


    - name: Build and Package
      run: dotnet pack --configuration Release --output ./nuget Unofficial_ECPayAIO_Net/ECPay.Payment.Integration/ECPay.Payment.Integration.csproj

    - name: Publish to GitHub Packages
      env:
        NUGET_SERVER_URL: "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        for nupkg in ./nuget/*.nupkg; do
          dotnet nuget push "$nupkg" \
            --source $NUGET_SERVER_URL \
            --api-key $NUGET_API_KEY
        done

